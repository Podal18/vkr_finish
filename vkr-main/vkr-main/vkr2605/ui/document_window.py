from PyQt6 import QtCore, QtGui, QtWidgets
from db.db import get_connection
from datetime import datetime



class Ui_DocumentWindow(object):
    def setupUi(self, DocumentWindow):
        DocumentWindow.setObjectName("DocumentWindow")
        DocumentWindow.resize(1000, 600)
        DocumentWindow.setWindowTitle("–î–æ–∫—É–º–µ–Ω—Ç—ã")
        DocumentWindow.setWindowFlags(QtCore.Qt.WindowType.FramelessWindowHint)
        DocumentWindow.setAttribute(QtCore.Qt.WidgetAttribute.WA_TranslucentBackground)

        self.centralwidget = QtWidgets.QWidget(DocumentWindow)
        DocumentWindow.setCentralWidget(self.centralwidget)

        self.background = QtWidgets.QFrame(self.centralwidget)
        self.background.setGeometry(0, 0, 1000, 600)
        self.background.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #d4fc79, stop:1 #96e6a1);
                border-radius: 10px;
            }
        """)

        # ‚úï –ö–Ω–æ–ø–∫–∞
        self.exit_button = QtWidgets.QPushButton(parent=DocumentWindow)
        self.exit_button.setGeometry(QtCore.QRect(960, 10, 30, 30))
        self.exit_button.setText("‚úï")
        self.exit_button.setStyleSheet("""
            QPushButton {
                background: none;
                border: none;
                font-size: 18px;
                color: white;
            }
            QPushButton:hover {
                color: #ffdddd;
            }
        """)
        self.exit_button.clicked.connect(DocumentWindow.close)

        # ‚Üê –ù–∞–∑–∞–¥
        self.back_button = QtWidgets.QPushButton("‚Üê", self.background)
        self.back_button.setGeometry(30, 540, 60, 40)
        self.back_button.setStyleSheet("""
            QPushButton {
                background-color: white;
                color: #333;
                font-size: 14px;
                border-radius: 20px;
            }
            QPushButton:hover {
                background-color: #f0f0f0;
            }
        """)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = QtWidgets.QLabel(self.background)
        self.title_label.setGeometry(30, 20, 600, 40)
        self.title_label.setText("–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        self.title_label.setStyleSheet("font-size: 24px; font-weight: bold; color: white;")

        # –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.filter_frame = QtWidgets.QFrame(self.background)
        self.filter_frame.setGeometry(30, 70, 940, 60)
        self.filter_frame.setStyleSheet("background-color: rgba(255,255,255,0.9); border-radius: 10px;")

        self.search_input = QtWidgets.QLineEdit(self.filter_frame)
        self.search_input.setPlaceholderText("–ü–æ–∏—Å–∫ –ø–æ –§–ò–û")
        self.search_input.setGeometry(20, 10, 250, 40)

        self.doc_type_combo = QtWidgets.QComboBox(self.filter_frame)
        self.doc_type_combo.setGeometry(290, 10, 180, 40)
        self.doc_type_combo.addItems(["–í—Å–µ —Ç–∏–ø—ã", "–ú–µ–¥—Å–ø—Ä–∞–≤–∫–∞", "–î–æ–ø—É—Å–∫", "–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ"])

        self.date_filter_combo = QtWidgets.QComboBox(self.filter_frame)
        self.date_filter_combo.setGeometry(490, 10, 180, 40)
        self.date_filter_combo.addItems(["–í—Å–µ", "–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π", "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ"])

        self.search_button = QtWidgets.QPushButton("üîç –ù–∞–π—Ç–∏", self.filter_frame)
        self.search_button.setGeometry(690, 10, 100, 40)

        for widget in [self.search_button]:
            widget.setStyleSheet("""
                QPushButton {
                    background-color: #96e6a1;
                    color: white;
                    border-radius: 20px;
                    font-size: 15px;
                }
                QPushButton:hover {
                    background-color: #7ddf94;
                }
            """)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.doc_table = QtWidgets.QTableWidget(self.background)
        self.doc_table.setGeometry(30, 150, 940, 360)
        self.doc_table.setColumnCount(5)
        self.doc_table.setHorizontalHeaderLabels(["–§–ò–û", "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞", "–ù–æ–º–µ—Ä", "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", "–°—Ç–∞—Ç—É—Å"])
        self.doc_table.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.doc_table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows)
        self.doc_table.setStyleSheet("""
            QTableWidget {
                background-color: white;
                border-radius: 10px;
            }
            QHeaderView::section {
                background-color: #b9fbc0;
                padding: 4px;
                font-weight: bold;
                border: 1px solid white;
            }
        """)

class DocumentWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_DocumentWindow()
        self.ui.setupUi(self)
        self.setup_connections()
        self.load_documents()
        self.setup_table()

    def setup_connections(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.ui.search_button.clicked.connect(self.apply_filters)
        self.ui.doc_type_combo.currentIndexChanged.connect(self.apply_filters)
        self.ui.date_filter_combo.currentIndexChanged.connect(self.apply_filters)
        self.ui.search_input.textChanged.connect(self.apply_filters)

    def setup_table(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã"""
        self.ui.doc_table.setColumnWidth(0, 200)  # –§–ò–û
        self.ui.doc_table.setColumnWidth(1, 150)  # –¢–∏–ø
        self.ui.doc_table.setColumnWidth(2, 120)  # –ù–æ–º–µ—Ä
        self.ui.doc_table.setColumnWidth(3, 120)  # –°—Ä–æ–∫
        self.ui.doc_table.setColumnWidth(4, 100)  # –°—Ç–∞—Ç—É—Å

    def load_documents(self):
        """–ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        connection = get_connection()
        try:
            with connection.cursor() as cursor:
                cursor.execute("""
                    SELECT 
                        e.full_name,
                        d.doc_type,
                        d.doc_number,
                        d.expiry_date
                    FROM documents d
                    JOIN employees e ON d.employee_id = e.id
                """)
                self.all_documents = cursor.fetchall()
                self.apply_filters()
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        finally:
            connection.close()

    def apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        search_text = self.ui.search_input.text().lower()
        doc_type = self.ui.doc_type_combo.currentText()
        date_filter = self.ui.date_filter_combo.currentText()

        filtered = []
        today = datetime.today().date()

        for doc in self.all_documents:
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–∫—Å—Ç—É
            if search_text not in doc["full_name"].lower():
                continue

            # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if doc_type != "–í—Å–µ —Ç–∏–ø—ã" and doc_type not in doc["doc_type"]:
                continue

            # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ä–æ–∫—É
            expiry_date = doc["expiry_date"]
            status = "–ê–∫—Ç–∏–≤–µ–Ω" if expiry_date > today else "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω"

            if date_filter == "–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π":
                delta = (expiry_date - today).days
                if not (0 < delta <= 30):
                    continue
            elif date_filter == "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ" and status != "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω":
                continue

            filtered.append(doc)

        self.update_table(filtered)

    def update_table(self, documents):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        self.ui.doc_table.setRowCount(0)

        for row_idx, doc in enumerate(documents):
            self.ui.doc_table.insertRow(row_idx)

            # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
            expiry_date = doc["expiry_date"]
            status = "–ê–∫—Ç–∏–≤–µ–Ω" if expiry_date > datetime.today().date() else "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω"

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            self.ui.doc_table.setItem(row_idx, 0, QtWidgets.QTableWidgetItem(doc["full_name"]))
            self.ui.doc_table.setItem(row_idx, 1, QtWidgets.QTableWidgetItem(doc["doc_type"]))
            self.ui.doc_table.setItem(row_idx, 2, QtWidgets.QTableWidgetItem(doc["doc_number"]))
            self.ui.doc_table.setItem(row_idx, 3, QtWidgets.QTableWidgetItem(expiry_date.strftime("%d.%m.%Y")))

            # –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            status_item = QtWidgets.QTableWidgetItem(status)
            status_item.setForeground(QtGui.QColor("green") if status == "–ê–∫—Ç–∏–≤–µ–Ω" else QtGui.QColor("red"))
            self.ui.doc_table.setItem(row_idx, 4, status_item)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    window = DocumentWindow()
    window.show()
    sys.exit(app.exec())





# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = QtWidgets.QMainWindow()
    ui = Ui_DocumentWindow()
    ui.setupUi(window)
    window.show()
    sys.exit(app.exec())
